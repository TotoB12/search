I am working on web app that will act like a simply search engine, where users can enter a search term or question, and get an AI generated answer in seconds. Here is the full project:

public\index.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SearchT</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1 id="logo">SearchT</h1>
    <form id="search-form">
        <div class="search-container">
            <button type="submit" id="search-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </button>
            <input type="text" id="search-input" placeholder="What are you looking for?" required>
        </div>
    </form>
    <div id="loading" style="display: none;">Loading...</div>
    <div class="answerContainer">
        <div id="answer" style="display: none;"></div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.8/dist/purify.min.js"></script>
    <script src="script.js"></script>
</body>
</html>
```

public\script.js
```javascript
document.addEventListener('DOMContentLoaded', function () {
    const highlightExtension = {
        name: 'highlight',
        level: 'inline',
        start(src) { return src.indexOf('{{'); },
        tokenizer(src, tokens) {
            const rule = /^{{(?!{)([\s\S]+?[^}])}}(?!})/;
            const match = rule.exec(src);
            if (match) {
                return {
                    type: 'highlight',
                    raw: match[0],
                    text: match[1],
                };
            }
        },
        renderer(token) {
            return '<span class="highlight">' + token.text + '</span>';
        }
    };

    marked.use({ extensions: [highlightExtension] });

    function processCitations(text, urls) {
        return text.replace(/\{\{\{(\d+(?:,\d+)*)\}\}\}/g, (match, p1) => {
            const indices = p1.split(',').map(Number);
            const links = indices.map(index => {
                const url = urls.find(u => u.index === index);
                if (url) {
                    return `<a href="${url.url}" target="_blank" rel="noopener noreferrer">${index + 1}</a>`;
                }
                return index + 1;
            });
            return `<sup>[${links.join(',')}]</sup>`;
        });
    }

    const searchForm = document.getElementById('search-form');
    const searchInput = document.getElementById('search-input');
    const loadingDiv = document.getElementById('loading');
    const answerDiv = document.getElementById('answer');

    searchForm.addEventListener('submit', function (e) {
        e.preventDefault();
        const query = searchInput.value.trim();
        if (query) {
            activateSearchLayout();
            submitSearch(query);
        }
    });

    function activateSearchLayout() {
        document.body.classList.add('search-active');
    }

    async function submitSearch(query) {
        loadingDiv.style.display = 'block';
        answerDiv.style.display = 'none';

        try {
            const response = await fetch('https://api.totob12.com/search/search', {
            // const response = await fetch('http://localhost:3000/search/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ query }),
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();
            pollForResult(data.jobId);
        } catch (error) {
            loadingDiv.style.display = 'none';
            answerDiv.style.display = 'block';
            answerDiv.innerText = `Error: ${error.message}`;
        }
    }

    async function pollForResult(jobId) {
        try {
            const response = await fetch(`https://api.totob12.com/search/result/${jobId}`);
            // const response = await fetch(`http://localhost:3000/search/result/${jobId}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();

            if (data.status === 'completed' && !data.answer.error) {
                console.log(data);
                loadingDiv.style.display = 'none';
                answerDiv.style.display = 'block';
                const processedAnswer = processCitations(data.answer, data.urls);
                answerDiv.innerHTML = DOMPurify.sanitize(marked.parse(processedAnswer));
            } else if (data.status === 'error' || (data.answer && data.answer.error)) {
                loadingDiv.style.display = 'none';
                answerDiv.style.display = 'block';
                console.log(data);
                answerDiv.innerText = `Error: An error occurred while processing the search query`;
            } else {
                setTimeout(() => pollForResult(jobId), 100);
            }
        } catch (error) {
            loadingDiv.style.display = 'none';
            answerDiv.style.display = 'block';
            answerDiv.innerText = `Error: ${error.message}`;
        }
    }
});

```

public\style.css
```css
@font-face {
    font-family: "Poly Sans";
    src: url('fonts/PolySansNeutral.ttf') format('truetype');
}

@font-face {
    font-family: "Poly Sans Bulky";
    src: url('fonts/PolySansBulky.ttf') format('truetype');
}

@font-face {
    font-family: "Poly Sans Slim";
    src: url('fonts/PolySansSlim.ttf') format('truetype');
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Poly Sans", Arial, sans-serif;
    background-color: #ffffff;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    transition: padding-top 0.5s ease;
}

#logo {
    font-family: "Poly Sans Bulky", Arial, sans-serif;
    font-size: 4rem;
    color: #333;
    /* transition: all 0.5s ease; */
}

#search-form {
    width: 100%;
    max-width: 800px;
    padding: 2rem;
    text-align: center;
    transition: all 0.5s ease;
}

.search-container {
    display: flex;
    background-color: #efefef;
    border-radius: 50px;
    padding: 0.5rem;
    margin: 0 auto;
    transition: all 0.5s ease;
}

::placeholder {
    color: #8b8b8b;
}

#search-input {
    flex-grow: 1;
    border: none;
    outline: none;
    font-family: "Poly Sans", Arial, sans-serif;
    font-size: 1.2rem;
    padding: 0.5rem;
    background: transparent;
}

#search-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

#search-button svg {
    width: 24px;
    height: 24px;
    color: #333;
    transition: color 0.3s ease;
}

#search-button:hover svg {
    color: #007bff;
}

#loading {
    margin-top: 2rem;
    font-size: 1.5rem;
    color: #333;
    transition: display 0.5s ease;
}

#answer {
    text-align: left;
    padding: 1rem;
    font-size: 1.1rem;
    line-height: 1.6;
}

#answer h1,
#answer h2,
#answer h3 {
    font-family: "Poly Sans Bulky", Arial, sans-serif;
    margin-top: 1.5rem;
    margin-bottom: 1.0rem;
}

#answer p {
    margin-bottom: 1rem;
}

#answer ul,
#answer ol {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
}

#answer code {
    background-color: #f5f5f5;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: "Poly Sans Slim", monospace;
}

#answer pre {
    background-color: #f5f5f5;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    overflow-x: auto;
}

#answer blockquote {
    border-left: 4px solid #ccc;
    padding-left: 1rem;
    color: #666;
    margin-bottom: 1rem;
}

#answer a {
    color: #007bff;
    text-decoration: none;
}

#answer a:hover {
    text-decoration: underline;
}

#answer sup {
    font-size: 0.75em;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
    top: -0.5em;
}

#answer sup a {
    color: #007bff;
    text-decoration: none;
    margin: 0 2px;
}

#answer sup a:hover {
    text-decoration: underline;
}

.highlight {
    background-color: #c4c4c4;
    padding: 0.2em;
    border-radius: 4px;
}

.answerContainer {
    width: 100%;
    max-width: 800px;
    padding: 2rem;
    display: flex;
    flex-direction: column;
}

body.search-active {
    padding-top: 100px;
    justify-content: flex-start;
}

body.search-active #logo {
    font-size: 2rem;
    position: fixed;
    top: 15px;
    left: 20px;
    margin: 0;
}

body.search-active #search-form {
    position: fixed;
    top: 0;
    width: 100%;
    padding: 10px 0;
}

body.search-active .search-container {
    max-width: 600px;
    width: 100%;
    margin: 0 auto;
}

@media (max-width: 600px) {
    #logo {
        font-size: 3rem;
    }

    .search-container {
        width: 100%;
    }

    body.search-active .search-container {
        width: 90%;
    }
}
```

server.js
```javascript
const express = require('express');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 8000;

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`Server is running on port ${PORT}`);
});

```

This all works well, but I want to add a new feature. Here is an example of a response `data`:

```json
{
    "status": "completed",
    "answer": "## iPhone 13 Mini Processor\n\nThe iPhone 13 mini uses the {{Apple A15 Bionic}} processor, which is built on a 5nm process. {{{1}}} \n",
    "urls": [
        {
            "index": 1,
            "url": "https://www.gsmarena.com/apple_iphone_13_mini-11104.php"
        },
        {
            "index": 2,
            "url": "https://www.apple.com/iphone/compare/?modelList=iphone-13,iphone-13-mini"
        }
    ],
    "images": [
        "https://api.totob12.com/image/https%3A%2F%2Fm-cdn.phonearena.com%2Fimages%2Farticle%2F131458-wide-two_1200%2FApples-chip-foundry-confirms-the-iPhone-13-wont-have-a-3nm-A15-processor.jpg",
        "https://api.totob12.com/image/http%3A%2F%2Fexp-picture.cdn.bcebos.com%2F89402670d5413a8cbae25cb81ffc508c9ace8141.jpg%3Fx-bce-process%3Dimage%252Fcrop%252Cx_0%252Cy_0%252Cw_520%252Ch_297%252Fformat%252Cf_auto%252Fquality%252Cq_80",
        "https://api.totob12.com/image/https%3A%2F%2Fwww.apple.com%2Fnewsroom%2Fimages%2Fproduct%2Fiphone%2Fgeo%2FApple_iphone13_hero_geo_09142021_inline.jpg.large_2x.jpg",
        "https://api.totob12.com/image/https%3A%2F%2Fi.pcmag.com%2Fimagery%2Freviews%2F0189rsptnoc2hdNuz27szSx-14.jpg",
        "https://api.totob12.com/image/https%3A%2F%2Fwww.notebookcheck.net%2Ffileadmin%2F_processed_%2F3%2F7%2Fcsm_20210924_1601571_c4db7a0212.jpg",
        "https://api.totob12.com/image/https%3A%2F%2Fimages.hindustantimes.com%2Ftech%2Fimg%2F2021%2F10%2F01%2F1600x900%2FiPhone_13_Mini_(9)_1633111760137_1633111770414.jpg",
        "https://api.totob12.com/image/https%3A%2F%2Ficdn.ensonhaber.com%2Fresimler%2Fdiger%2Fkok%2F2021%2F05%2F27%2Fiphone-13_3913.jpg",
        "https://api.totob12.com/image/https%3A%2F%2Fwww.silicon.co.uk%2Fwp-content%2Fuploads%2F2021%2F09%2FAppleiphone13-01.jpg",
        "https://api.totob12.com/image/https%3A%2F%2Fbenchmark.rs%2Fwp-content%2Fuploads%2F2021%2F10%2FApple-iPhone-13-i-iPhone-13-Mini-038-scaled.jpg",
        "https://api.totob12.com/image/https%3A%2F%2Fcdn.mos.cms.futurecdn.net%2FkaDRARofF4TKsoX4Y7bmcc.jpg"
    ]
}
```

As you can see, the client also gets a bunch of images. I want my web app to display the first 4 images in a row grid in the answer. Each image should be made into a square element, and the 4 squares should be one element. This images element should be positioned very specifically:

- if the `answer` div starts with an <h2> element, then place it after that
- if the `answer` div does not starts with an <h2> element, then place it at the begginning of the `answer` div

I want you to fully develop and implement this.