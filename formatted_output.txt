I am working on web app that will act like a simply search engine, where users can enter a search term or question, and get an AI generated answer in seconds. Here is the full project:

public\index.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SearchT</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1 id="logo"><a href="/">SearchT</a></h1>
    <form id="search-form">
        <div class="search-container">
            <button type="button" id="search-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </button>
            <input type="text" id="search-input" placeholder="What are you looking for?" required>
        </div>
    </form>
    <div class="answerContainer">
        <div id="answer" style="display: none;"></div>
    </div>
    <div class="lightbox">
        <button class="lightbox-close">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>
        <div class="lightbox-content">
            <img src="" alt="Lightbox Image">
        </div>
    </div>
    <script src="https://cdn.socket.io/4.5.1/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.8/dist/purify.min.js"></script>
    <script src="script.js"></script>
</body>
</html>
```

public\script.js
```javascript
document.addEventListener('DOMContentLoaded', function () {
    const searchForm = document.getElementById('search-form');
    const searchInput = document.getElementById('search-input');
    const answerContainer = document.querySelector('.answerContainer');
    const answerDiv = document.getElementById('answer');
    const searchButton = document.getElementById('search-button');
    const lightbox = document.querySelector('.lightbox');
    const lightboxImg = lightbox.querySelector('img');
    const lightboxClose = lightbox.querySelector('.lightbox-close');

    searchButton.addEventListener('click', function (e) {
        e.preventDefault();
        const query = searchInput.value.trim();
        if (query) {
            activateSearchLayout();
            submitSearch(query);
        }
    });
    searchInput.addEventListener('keydown', function (e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const query = searchInput.value.trim();
            if (query) {
                activateSearchLayout();
                submitSearch(query);
            }
        }
    });

    searchForm.addEventListener('submit', function (e) {
        e.preventDefault();
        const query = searchInput.value.trim();
        if (query) {
            activateSearchLayout();
            submitSearch(query);
        }
    });

    const highlightExtension = {
        name: 'highlight',
        level: 'inline',
        start(src) { return src.indexOf('{{'); },
        tokenizer(src, tokens) {
            const rule = /^{{(?!{)([\s\S]+?[^}])}}(?!})/;
            const match = rule.exec(src);
            if (match) {
                return {
                    type: 'highlight',
                    raw: match[0],
                    text: match[1],
                };
            }
        },
        renderer(token) {
            return '<span class="highlight">' + token.text + '</span>';
        }
    };

    marked.use({ extensions: [highlightExtension] });

    function processCitations(text, urls) {
        return text.replace(/\{\{\{(\d+(?:\s*,\s*\d+)*)\}\}\}/g, (match, p1) => {
            const indices = p1.split(',').map(index => Number(index.trim()));
            const links = indices.map(index => {
                const url = urls.find(u => u.index === index);
                if (url) {
                    return `<a href="${url.url}" target="_blank" rel="noopener noreferrer">${index + 1}</a>`;
                }
                return index + 1;
            });
            return `<sup>[${links.join(',')}]</sup>`;
        });
    }

    function activateSearchLayout() {
        document.body.classList.add('search-active');
    }

    function showSkeletonLoader() {
        if (answerDiv.style.display !== 'none') {
            answerDiv.style.opacity = '0';
            answerDiv.style.transform = 'translateY(20px)';
            setTimeout(() => {
                answerDiv.style.display = 'none';
                insertSkeletonLoader();
            }, 300);
        } else {
            insertSkeletonLoader();
        }
    }

    function insertSkeletonLoader() {
        const existingLoader = document.getElementById('skeleton-loader');
        if (existingLoader) {
            existingLoader.remove();
        }

        const skeletonLoader = document.createElement('div');
        skeletonLoader.id = 'skeleton-loader';
        skeletonLoader.className = 'skeleton-loader';

        const skeletonTitle = document.createElement('div');
        skeletonTitle.className = 'skeleton-title skeleton-element';
        skeletonLoader.appendChild(skeletonTitle);

        const skeletonImageGrid = document.createElement('div');
        skeletonImageGrid.className = 'skeleton-image-grid';

        for (let i = 0; i < 4; i++) {
            const skeletonImage = document.createElement('div');
            skeletonImage.className = 'skeleton-image skeleton-element';
            skeletonImageGrid.appendChild(skeletonImage);
        }

        skeletonLoader.appendChild(skeletonImageGrid);

        for (let i = 0; i < 5; i++) {
            const skeletonText = document.createElement('div');
            skeletonText.className = 'skeleton-text skeleton-element';
            skeletonLoader.appendChild(skeletonText);
        }

        answerContainer.appendChild(skeletonLoader);
    }

    function hideSkeletonLoader() {
        const skeletonLoader = document.getElementById('skeleton-loader');
        if (skeletonLoader) {
            skeletonLoader.style.opacity = '0';
            skeletonLoader.style.transform = 'translateY(20px)';
            setTimeout(() => {
                skeletonLoader.remove();
                answerDiv.style.display = 'block';
                answerDiv.style.opacity = '0';
                answerDiv.style.transform = 'translateY(20px)';
                answerDiv.offsetHeight;
                answerDiv.style.opacity = '1';
                answerDiv.style.transform = 'translateY(0)';
            }, 300);
        } else {
            answerDiv.style.display = 'block';
        }
    }

    function openLightbox(imgSrc) {
        lightboxImg.src = imgSrc;
        lightbox.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
        lightbox.classList.remove('active');
        document.body.style.overflow = '';
    }

    lightboxClose.addEventListener('click', closeLightbox);
    lightbox.addEventListener('click', (e) => {
        if (e.target === lightbox) {
            closeLightbox();
        }
    });

    function submitSearch(query) {
        answerDiv.innerHTML = '';
        showSkeletonLoader();

        const socket = io('https://api.totob12.com', {
            transports: ['websocket'],
            withCredentials: true
        });

        socket.on('connect', () => {
            socket.emit('search', query);
        });

        socket.on('searchResult', (data) => {
            if (data.status === 'completed' && !data.error) {
                console.log(data);
                hideSkeletonLoader();

                const processedAnswer = processCitations(data.answer, data.urls);
                const parsedHtml = marked.parse(processedAnswer);

                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = parsedHtml;

                const firstElement = tempDiv.firstElementChild;
                let insertPosition = 'start';

                if (firstElement && firstElement.tagName === 'H2') {
                    insertPosition = 'afterH2';
                }

                if (data.images && data.images.length > 0) {
                    const imagesToShow = data.images.slice(0, 4);
                    const imageGrid = document.createElement('div');
                    imageGrid.className = 'image-grid';

                    imagesToShow.forEach(imgUrl => {
                        const gridItem = document.createElement('div');
                        gridItem.className = 'image-grid-item';
                        const img = document.createElement('img');
                        img.src = imgUrl + '?p=300';
                        img.dataset.fullSrc = imgUrl;
                        img.alt = 'Related Image';
                        gridItem.appendChild(img);
                        imageGrid.appendChild(gridItem);
                    });

                    if (insertPosition === 'afterH2') {
                        if (firstElement.nextSibling) {
                            tempDiv.insertBefore(imageGrid, firstElement.nextSibling);
                        } else {
                            tempDiv.appendChild(imageGrid);
                        }
                    } else {
                        tempDiv.insertBefore(imageGrid, tempDiv.firstChild);
                    }
                }

                const config = {
                    ADD_ATTR: ['target', 'rel']
                };
                const finalHtml = DOMPurify.sanitize(tempDiv.innerHTML, config);
                answerDiv.innerHTML = finalHtml;

                const images = answerDiv.querySelectorAll('.image-grid-item img');

                images.forEach(img => {
                    img.addEventListener('click', () => openLightbox(img.dataset.fullSrc));
                });

                socket.disconnect();
            } else if (data.status === 'error' || (data.answer && data.answer.error)) {
                hideSkeletonLoader();
                console.log(data);
                answerDiv.innerText = `Error: An error occurred while processing the search query`;
                socket.disconnect();
            }
        });

        socket.on('connect_error', (err) => {
            console.log('Connection error:', err.message);
            hideSkeletonLoader();
            answerDiv.innerText = `Error: ${err.message}`;
        });
    }
});

```

public\style.css
```css
@font-face {
    font-family: "Poly Sans";
    src: url('fonts/PolySansNeutral.ttf') format('truetype');
}

@font-face {
    font-family: "Poly Sans Bulky";
    src: url('fonts/PolySansBulky.ttf') format('truetype');
}

@font-face {
    font-family: "Poly Sans Slim";
    src: url('fonts/PolySansSlim.ttf') format('truetype');
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Poly Sans", Arial, sans-serif;
    background-color: #ffffff;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    transition: padding-top 0.5s ease;
}

#logo {
    font-family: "Poly Sans Bulky", Arial, sans-serif;
    font-size: 4rem;
    color: #333;
}

#logo a {
    text-decoration: none;
    color: inherit;
    pointer-events: none;
}

#search-form {
    width: 100%;
    max-width: 800px;
    padding: 2rem;
    text-align: center;
    transition: all 0.5s ease;
}

.search-container {
    display: flex;
    background-color: #efefef;
    border-radius: 50px;
    padding: 0.5rem;
    margin: 0 auto;
    transition: all 0.5s ease;
}

::placeholder {
    color: #8b8b8b;
}

#search-input {
    flex-grow: 1;
    border: none;
    outline: none;
    font-family: "Poly Sans", Arial, sans-serif;
    font-size: 1.2rem;
    padding: 0.5rem;
    background: transparent;
}

#search-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

#search-button svg {
    width: 24px;
    height: 24px;
    color: #333;
    transition: color 0.3s ease;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

#answer, #skeleton-loader {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.5s ease forwards;
}

#search-button:hover svg {
    color: #007bff;
}

#answer {
    text-align: left;
    padding: 1rem;
    font-size: 1.1rem;
    line-height: 1.6;
}

#answer h1,
#answer h2,
#answer h3 {
    font-family: "Poly Sans Bulky", Arial, sans-serif;
    margin-top: 1.5rem;
    margin-bottom: 1.0rem;
}

#answer p {
    margin-bottom: 1rem;
}

#answer ul,
#answer ol {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
}

#answer code {
    background-color: #f5f5f5;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: "Poly Sans Slim", monospace;
}

#answer pre {
    background-color: #f5f5f5;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    overflow-x: auto;
}

#answer blockquote {
    border-left: 4px solid #ccc;
    padding-left: 1rem;
    color: #666;
    margin-bottom: 1rem;
}

#answer a {
    color: #007bff;
    text-decoration: none;
}

#answer a:hover {
    text-decoration: underline;
}

#answer sup {
    font-size: 0.75em;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
    top: -0.5em;
}

#answer sup a {
    color: #007bff;
    text-decoration: none;
    margin: 0 2px;
}

#answer sup a:hover {
    text-decoration: underline;
}

.highlight {
    background-color: #c4c4c4;
    padding: 0.2em;
    border-radius: 4px;
}

.image-grid,
.skeleton-image-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
    margin: 1.5rem 0;
}

.image-grid-item,
.skeleton-image {
    width: 100%;
    padding-top: 100%;
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.image-grid-item img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    cursor: pointer;
}

.image-grid-item img:hover {
    transform: scale(1.05);
}

.skeleton-element {
    background: #eee;
    background: linear-gradient(270deg, #f1f1f1, #e1e1e1, #f1f1f1);
    background-size: 200% 100%;
    border-radius: 4px;
    animation: gradientMoves 800ms linear infinite;
}

@keyframes gradientMoves {
    0% {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    100% {
        background-position: 200% 50%;
    }
}

.skeleton-loader {
    width: 100%;
    padding: 1rem;
}

.skeleton-title {
    width: 50%;
    height: 32px;
    margin-bottom: 1rem;
}

.skeleton-image::after {
    content: '';
    display: block;
    background: inherit;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.skeleton-text {
    width: 100%;
    height: 20px;
    margin-bottom: 8px;
}

.answerContainer {
    width: 100%;
    max-width: 800px;
    display: flex;
    flex-direction: column;
}

.lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
}

.lightbox.active {
    opacity: 1;
    visibility: visible;
}

.lightbox-content {
    max-width: 90%;
    max-height: 90%;
    position: relative;
}

.lightbox-content img {
    max-width: 100%;
    max-height: 90vh;
    object-fit: contain;
    border-radius: 4px;
}

.lightbox-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
    z-index: 1001;
}

.lightbox-close:hover {
    background-color: none;
}

body.search-active {
    padding-top: 100px;
    justify-content: flex-start;
}

body.search-active #logo {
    font-size: 2rem;
    position: fixed;
    top: 15px;
    left: 20px;
    margin: 0;
}

body.search-active #logo a {
    pointer-events: auto;
}

body.search-active #logo a:hover {
    text-decoration: underline;
    text-decoration-color: black;
}

body.search-active #search-form {
    position: fixed;
    top: 0;
    width: 100%;
    padding: 10px 0;
}

body.search-active .search-container {
    max-width: 600px;
    width: 100%;
    margin: 0 auto;
}

body.search-active .answerContainer {
    padding: 2rem;
    min-height: 200px;
}

@media (max-width: 600px) {
    #logo {
        font-size: 3rem;
    }

    .search-container {
        width: 100%;
    }

    body.search-active .search-container {
        width: 90%;
    }
}

@media (max-width: 800px) {
    .image-grid,
    .skeleton-image-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

```

server.js
```javascript
const express = require('express');
const path = require('path');
const axios = require('axios');
const sharp = require('sharp');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 8000;

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

app.get("/image/*", async (req, res) => {
    const imageUrl = decodeURIComponent(req.params[0]);
    const { p } = req.query;

    try {
        const imageResponse = await axios.get(imageUrl, {
            responseType: "stream",
            headers: {
                "User-Agent":
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 " +
                    "(KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0",
            },
        });

        const contentType = imageResponse.headers["content-type"];
        res.set("Content-Type", contentType);

        if (p) {
            const pixels = parseInt(p, 10);

            const transformer = sharp().resize(pixels, pixels, { fit: 'inside' });

            imageResponse.data.pipe(transformer).pipe(res);
        } else {
            imageResponse.data.pipe(res);
        }

    } catch (error) {
        console.error("Failed to retrieve the image:", error);
        res.status(500).send("Failed to retrieve image");
    }
});

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`Server is running on port ${PORT}`);
});

```

This all works great, but I want to introduce new features. When the images in the lightbox is still loading, have a spinner be shown instead of the image. This will fix the current implementation which still shows the previously displayed image when waiting for the clicked one to load. I want you to fully develop and implement this.