I am working on web app that will act like a simply search engine, where users can enter a search term or question, and get an AI generated answer in seconds. Here is the full project:

public\index.html
```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SearchT</title>
    <link rel="stylesheet" href="style.css">
    <link rel="preconnect" href="https://cdn.socket.io" />
    <link rel="preconnect" href="https://cdn.jsdelivr.net" />
</head>

<body>
    <nav class="navbar"></nav>
    <h1 id="logo"><a href="/">SearchT</a></h1>
    <form id="search-form">
        <div class="search-container">
            <span id="search-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="currentColor"
                    stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="7"></circle>
                    <line x1="20" y1="20" x2="16.65" y2="16.65"></line>
                </svg>
            </span>
            <div class="search-input-wrapper">
                <input type="text" id="search-input" placeholder="What are you looking for?" required
                    autocomplete="off">
                <div id="suggestions-container"></div>
            </div>
            <button type="button" id="search-button" aria-label="Search">
                <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd"
                        d="M15.1918 8.90615C15.6381 8.45983 16.3618 8.45983 16.8081 8.90615L21.9509 14.049C22.3972 14.4953 22.3972 15.2189 21.9509 15.6652C21.5046 16.1116 20.781 16.1116 20.3347 15.6652L17.1428 12.4734V22.2857C17.1428 22.9169 16.6311 23.4286 15.9999 23.4286C15.3688 23.4286 14.8571 22.9169 14.8571 22.2857V12.4734L11.6652 15.6652C11.2189 16.1116 10.4953 16.1116 10.049 15.6652C9.60265 15.2189 9.60265 14.4953 10.049 14.049L15.1918 8.90615Z"
                        fill="currentColor"></path>
                </svg>
            </button>
        </div>
    </form>

    <div class="tab-navigation">
        <button class="tab-button active" data-tab="all">All</button>
        <button class="tab-button" data-tab="images">Images</button>
        <button class="tab-button" data-tab="create">Create</button>
        <div class="tab-indicator"></div>
    </div>

    <div class="tab-content">
        <div class="tab-pane active" id="all-tab">
            <div class="main-content">
                <div class="answerContainer">
                    <div class="answerContent" style="display: none;">
                        <div class="answer-left">
                            <div id="answer"></div>
                            <div class="toolbar">
                                <button id="tts-button" class="toolbar-button">
                                    <svg class="tts-icon icon-md-heavy" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" clip-rule="evenodd"
                                            d="M11 4.9099C11 4.47485 10.4828 4.24734 10.1621 4.54132L6.67572 7.7372C6.49129 7.90626 6.25019 8.00005 6 8.00005H4C3.44772 8.00005 3 8.44776 3 9.00005V15C3 15.5523 3.44772 16 4 16H6C6.25019 16 6.49129 16.0938 6.67572 16.2629L10.1621 19.4588C10.4828 19.7527 11 19.5252 11 19.0902V4.9099ZM8.81069 3.06701C10.4142 1.59714 13 2.73463 13 4.9099V19.0902C13 21.2655 10.4142 22.403 8.81069 20.9331L5.61102 18H4C2.34315 18 1 16.6569 1 15V9.00005C1 7.34319 2.34315 6.00005 4 6.00005H5.61102L8.81069 3.06701ZM20.3166 6.35665C20.8019 6.09313 21.409 6.27296 21.6725 6.75833C22.5191 8.3176 22.9996 10.1042 22.9996 12.0001C22.9996 13.8507 22.5418 15.5974 21.7323 17.1302C21.4744 17.6185 20.8695 17.8054 20.3811 17.5475C19.8927 17.2896 19.7059 16.6846 19.9638 16.1962C20.6249 14.9444 20.9996 13.5175 20.9996 12.0001C20.9996 10.4458 20.6064 8.98627 19.9149 7.71262C19.6514 7.22726 19.8312 6.62017 20.3166 6.35665ZM15.7994 7.90049C16.241 7.5688 16.8679 7.65789 17.1995 8.09947C18.0156 9.18593 18.4996 10.5379 18.4996 12.0001C18.4996 13.3127 18.1094 14.5372 17.4385 15.5604C17.1357 16.0222 16.5158 16.1511 16.0539 15.8483C15.5921 15.5455 15.4632 14.9255 15.766 14.4637C16.2298 13.7564 16.4996 12.9113 16.4996 12.0001C16.4996 10.9859 16.1653 10.0526 15.6004 9.30063C15.2687 8.85905 15.3578 8.23218 15.7994 7.90049Z"
                                            fill="currentColor"></path>
                                    </svg>
                                    <svg class="tts-spinner icon-md-heavy" width="24" height="24" stroke="currentColor"
                                        fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round"
                                        stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg"
                                        style="display: none;">
                                        <line x1="12" y1="2" x2="12" y2="6"></line>
                                        <line x1="12" y1="18" x2="12" y2="22"></line>
                                        <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line>
                                        <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line>
                                        <line x1="2" y1="12" x2="6" y2="12"></line>
                                        <line x1="18" y1="12" x2="22" y2="12"></line>
                                        <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line>
                                        <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>
                                    </svg>
                                    <svg class="tts-stop icon-md-heavy" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none" xmlns="http://www.w3.org/2000/svg" style="display: none;">
                                        <path fill-rule="evenodd" clip-rule="evenodd"
                                            d="M2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM9.5 8.5C8.94772 8.5 8.5 8.94772 8.5 9.5V14.5C8.5 15.0523 8.94772 15.5 9.5 15.5H14.5C15.0523 15.5 15.5 15.0523 15.5 14.5V9.5C15.5 8.94772 15.0523 8.5 14.5 8.5H9.5Z"
                                            fill="currentColor"></path>
                                    </svg>
                                </button>
                                <button id="copy-button" class="toolbar-button">
                                    <svg class="copy-icon icon-md-heavy" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" clip-rule="evenodd"
                                            d="M7 5C7 3.34315 8.34315 2 10 2H19C20.6569 2 22 3.34315 22 5V14C22 15.6569 20.6569 17 19 17H17V19C17 20.6569 15.6569 22 14 22H5C3.34315 22 2 20.6569 2 19V10C2 8.34315 3.34315 7 5 7H7V5ZM9 7H14C15.6569 7 17 8.34315 17 10V15H19C19.5523 15 20 14.5523 20 14V5C20 4.44772 19.5523 4 19 4H10C9.44772 4 9 4.44772 9 5V7ZM5 9C4.44772 9 4 9.44772 4 10V19C4 19.5523 4.44772 20 5 20H14C14.5523 20 15 19.5523 15 19V10C15 9.44772 14.5523 9 14 9H5Z"
                                            fill="currentColor"></path>
                                    </svg>
                                    <svg class="checkmark-icon icon-md-heavy" width="24" height="24" fill="none"
                                        xmlns="http://www.w3.org/2000/svg" style="display: none;">
                                        <path fill-rule="evenodd" clip-rule="evenodd"
                                            d="M18.0633 5.67387C18.5196 5.98499 18.6374 6.60712 18.3262 7.06343L10.8262 18.0634C10.6585 18.3095 10.3898 18.4679 10.0934 18.4957C9.79688 18.5235 9.50345 18.4178 9.29289 18.2072L4.79289 13.7072C4.40237 13.3167 4.40237 12.6835 4.79289 12.293C5.18342 11.9025 5.81658 11.9025 6.20711 12.293L9.85368 15.9396L16.6738 5.93676C16.9849 5.48045 17.607 5.36275 18.0633 5.67387Z"
                                            fill="currentColor"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="answer-right">
                        </div>
                    </div>
                </div>
                <hr class="content-seperator">
                <div class="results-container">
                    <div class="general-web-results">
                    </div>
                    <div class="quick-results">
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane" id="images-tab">
            <div class="images-grid"></div>
        </div>
        <div class="tab-pane" id="create-tab">
            <div class="create-container">
                <form id="create-form">
                    <input type="text" id="create-input" placeholder="Describe what to create" required>
                    <button type="submit" id="create-button">Generate</button>
                </form>
                <div class="create-result">
                    <img id="create-image" src="" alt="Your created image" style="display: none;">
                    <div id="create-placeholder">Your image will appear here</div>
                </div>
            </div>
        </div>
    </div>

    <div class="lightbox">
        <button class="lightbox-close">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="white" stroke-width="2"
                stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>
        <button class="lightbox-prev">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="white" stroke-width="2"
                stroke-linecap="round" stroke-linejoin="round">
                <polyline points="15 18 9 12 15 6"></polyline>
            </svg>
        </button>
        <button class="lightbox-next">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="white" stroke-width="2"
                stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
        </button>
        <div class="lightbox-content">
            <div class="spinner"></div>
            <img src="" alt="Lightbox Image" style="display: none;">
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.8/dist/purify.min.js"></script>
    <script src="script.js"></script>
    <script>
        window.va = window.va || function () { (window.vaq = window.vaq || []).push(arguments); };
    </script>
    <script defer src="/_vercel/insights/script.js"></script>
</body>

</html>
```

public\script.js
```javascript
const searchForm = document.getElementById('search-form');
const searchInput = document.getElementById('search-input');
const answerContainer = document.querySelector('.answerContainer');
const answerContent = document.querySelector('.answerContent');
const answerLeft = document.querySelector('.answer-left');
const answerRight = document.querySelector('.answer-right');
const answerDiv = document.getElementById('answer');
const searchButton = document.getElementById('search-button');
const lightbox = document.querySelector('.lightbox');
const lightboxImg = lightbox.querySelector('img');
const lightboxClose = lightbox.querySelector('.lightbox-close');
const spinner = lightbox.querySelector('.spinner');
const lightboxPrev = document.querySelector('.lightbox-prev');
const lightboxNext = document.querySelector('.lightbox-next');
const toolbar = document.querySelector('.toolbar');
const ttsButton = document.getElementById('tts-button');
const ttsIcon = ttsButton.querySelector('.tts-icon');
const ttsSpinner = ttsButton.querySelector('.tts-spinner');
const ttsStop = ttsButton.querySelector('.tts-stop');
const copyButton = document.getElementById('copy-button');
const copyIcon = copyButton.querySelector('.copy-icon');
const checkmarkIcon = copyButton.querySelector('.checkmark-icon');
const suggestionsContainer = document.getElementById('suggestions-container');
const createForm = document.getElementById('create-form');
const createInput = document.getElementById('create-input');
const createButton = document.getElementById('create-button');
const createImage = document.getElementById('create-image');
const createPlaceholder = document.getElementById('create-placeholder');

let answerImageList = [];
let imagesTabImageList = [];
let currentImageList = [];
let currentImageIndex = 0;
let audioContext;
let audioSource;
let isPlaying = false;
let currentTab = 'all';
let storedImages = [];
const MAX_ANSWER_HEIGHT = 200;
const API_BASE_URL = 'https://api.totob12.com/search';
// const API_BASE_URL = 'http://localhost:3000/search';
let suggestionTimeout;

function getQueryParam(param) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
}

function resetSearchLayout() {
    document.body.classList.remove('search-active');
    answerContainer.style.display = 'none';
    answerDiv.innerHTML = '';
    removeExistingWebResults();
    searchInput.value = '';
    removeExpandButton();
}

function removeExpandButton() {
    const existingButton = document.querySelector('.expand-button');
    if (existingButton) {
        existingButton.remove();
    }
    answerContent.style.maxHeight = '';
    answerContent.classList.remove('collapsed');
}

function handleSearchSubmission(query) {
    activateSearchLayout();
    initializeTabs();
    submitSearch(query);
    const newUrl = `${window.location.pathname}?q=${encodeURIComponent(query)}`;
    history.pushState({ query }, '', newUrl);
}

searchButton.addEventListener('click', function (e) {
    e.preventDefault();
    const query = searchInput.value.trim();
    if (query) {
        handleSearchSubmission(query);
    }
});

searchInput.addEventListener('keydown', function (e) {
    if (e.key === 'Enter') {
        searchInput.blur();
        e.preventDefault();
        const query = searchInput.value.trim();
        if (query) {
            handleSearchSubmission(query);
        }
    }
});

searchForm.addEventListener('submit', function (e) {
    e.preventDefault();
    const query = searchInput.value.trim();
    if (query) {
        handleSearchSubmission(query);
    }
});

searchInput.addEventListener('focus', function () {
    const query = searchInput.value.trim();
    fetchSuggestions(query);
});

searchInput.addEventListener('blur', function (event) {
    setTimeout(() => {
        if (!suggestionsContainer.contains(document.activeElement)) {
            clearSuggestions();
        }
    }, 100);
});

searchInput.addEventListener('input', function () {
    const query = searchInput.value.trim();
    if (suggestionTimeout) {
        clearTimeout(suggestionTimeout);
    }
    suggestionTimeout = setTimeout(() => {
        fetchSuggestions(query);
    }, 300);
});

document.addEventListener('click', function (event) {
    if (!searchForm.contains(event.target) && !suggestionsContainer.contains(event.target)) {
        clearSuggestions();
    }
});

const initialQuery = getQueryParam('q');
if (initialQuery) {
    searchInput.value = initialQuery;
    handleSearchSubmission(initialQuery);
}

window.addEventListener('popstate', function (event) {
    const query = getQueryParam('q');
    if (query) {
        searchInput.value = query;
        activateSearchLayout();
        submitSearch(query);
    } else {
        resetSearchLayout();
    }
});

createForm.addEventListener('submit', function (e) {
    e.preventDefault();
    const prompt = createInput.value.trim();
    if (prompt) {
        generateCreateImage(prompt);
    }
});

const highlightExtension = {
    name: 'highlight',
    level: 'inline',
    start(src) { return src.indexOf('{{'); },
    tokenizer(src, tokens) {
        const rule = /^{{(?!{)([\s\S]+?[^}])}}(?!})/;
        const match = rule.exec(src);
        if (match) {
            return {
                type: 'highlight',
                raw: match[0],
                text: match[1],
            };
        }
    },
    renderer(token) {
        return '<span class="highlight">' + token.text + '</span>';
    }
};

marked.use({ extensions: [highlightExtension] });

function processCitations(text, urls) {
    return text.replace(/\{\{\{(\d+(?:\s*,\s*\d+)*)\}\}\}/g, (match, p1) => {
        const indices = p1.split(',').map(index => Number(index.trim()));
        const links = indices.map(index => {
            const url = urls.find(u => u.index === index);
            if (url) {
                return `<a href="${url.url}" target="_blank" rel="noopener noreferrer">${index + 1}</a>`;
            }
            return index + 1;
        });
        return `<sup>[${links.join(',')}]</sup>`;
    });
}

function activateSearchLayout() {
    document.body.classList.add('search-active');
}

function showSkeletonLoader() {
    if (isPlaying) {
        stopTTS();
    }
    removeExpandButton();
    if (answerContent.style.display !== 'none') {
        answerContent.style.opacity = '0';
        answerContent.style.transform = 'translateY(-20px)';
        setTimeout(() => {
            answerContent.style.display = 'none';
            answerDiv.innerHTML = '';
            insertSkeletonLoader();
        }, 100);
    } else {
        insertSkeletonLoader();
    }
}

function insertSkeletonLoader() {
    const existingLoader = document.getElementById('skeleton-loader');
    if (existingLoader) {
        existingLoader.remove();
    }

    const skeletonLoader = document.createElement('div');
    skeletonLoader.id = 'skeleton-loader';
    skeletonLoader.className = 'skeleton-loader';

    const skeletonLeft = document.createElement('div');
    skeletonLeft.className = 'skeleton-left';

    const skeletonTitle = document.createElement('div');
    skeletonTitle.className = 'skeleton-title skeleton-element';
    skeletonLeft.appendChild(skeletonTitle);

    for (let i = 0; i < 4; i++) {
        const skeletonText = document.createElement('div');
        skeletonText.className = 'skeleton-text skeleton-element';
        skeletonText.style.width = `${Math.floor(Math.random() * 60) + 40}%`;
        skeletonLeft.appendChild(skeletonText);
    }

    const skeletonRight = document.createElement('div');
    skeletonRight.className = 'skeleton-right';

    const skeletonImageGrid = document.createElement('div');
    skeletonImageGrid.className = 'skeleton-image-grid';

    for (let i = 0; i < 4; i++) {
        const skeletonImage = document.createElement('div');
        skeletonImage.className = 'skeleton-image skeleton-element';
        skeletonImageGrid.appendChild(skeletonImage);
    }

    skeletonRight.appendChild(skeletonImageGrid);

    skeletonLoader.appendChild(skeletonLeft);
    skeletonLoader.appendChild(skeletonRight);

    answerContainer.appendChild(skeletonLoader);
}

function hideSkeletonLoader(callback) {
    const skeletonLoader = document.getElementById('skeleton-loader');
    if (skeletonLoader) {
        skeletonLoader.style.opacity = '0';
        skeletonLoader.style.transform = 'translateY(20px)';
        setTimeout(() => {
            skeletonLoader.remove();
            answerContent.style.display = 'flex';
            answerContent.style.opacity = '0';
            answerContent.style.transform = 'translateY(20px)';
            void answerContent.offsetWidth;
            answerContent.style.opacity = '1';
            answerContent.style.transform = 'translateY(0)';
            if (callback) callback();
        }, 300);
    } else {
        answerContent.style.display = 'flex';
        if (callback) callback();
    }
}

function createSourcesList(urls) {
    const listContainer = document.createElement('div');
    listContainer.className = 'sources-grid';

    urls.forEach(urlObj => {
        const sourceItem = document.createElement('div');
        sourceItem.className = 'source-item';

        const sourceHeader = document.createElement('div');
        sourceHeader.className = 'source-header';

        const faviconImg = document.createElement('img');
        faviconImg.className = 'favicon';
        faviconImg.src = urlObj.favicon;
        faviconImg.alt = 'Favicon';

        const urlText = document.createElement('span');
        urlText.className = 'source-url';
        let urlDisplayText;
        try {
            urlDisplayText = (new URL(urlObj.url)).hostname;
        } catch (e) {
            urlDisplayText = urlObj.url;
        }
        urlText.textContent = urlDisplayText;

        sourceHeader.appendChild(faviconImg);
        sourceHeader.appendChild(urlText);

        const titleLink = document.createElement('a');
        titleLink.href = urlObj.url;
        titleLink.target = '_blank';
        titleLink.rel = 'noopener noreferrer';
        titleLink.className = 'source-title';

        let titleText = urlObj.title || '';
        titleText = titleText.replace(/Search icon.*$/, '').trim();
        titleLink.textContent = titleText || urlObj.url;

        sourceItem.appendChild(sourceHeader);
        sourceItem.appendChild(titleLink);

        listContainer.appendChild(sourceItem);
    });

    return listContainer;
}

async function handleTTS() {
    if (isPlaying) {
        stopTTS();
        return;
    }

    const answerElement = document.getElementById('answer');
    const clonedAnswerElement = answerElement.cloneNode(true);
    const supElements = clonedAnswerElement.querySelectorAll('sup');
    supElements.forEach(sup => sup.remove());
    const h2Elements = clonedAnswerElement.querySelectorAll('h2');
    h2Elements.forEach(h2 => h2.remove());
    const answerText = clonedAnswerElement.innerText;

    ttsIcon.style.display = 'none';
    ttsSpinner.style.display = 'block';

    try {
        const response = await fetch('https://api.totob12.com/tts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ text: answerText }),
        });

        if (!response.ok) throw new Error('TTS request failed');

        const arrayBuffer = await response.arrayBuffer();

        if (!audioContext) {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
        }

        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

        if (audioSource) {
            audioSource.stop();
        }

        audioSource = audioContext.createBufferSource();
        audioSource.buffer = audioBuffer;
        audioSource.connect(audioContext.destination);

        audioSource.onended = stopTTS;

        audioSource.start(0);
        isPlaying = true;

        ttsSpinner.style.display = 'none';
        ttsStop.style.display = 'block';
    } catch (error) {
        console.error('TTS error:', error);
        stopTTS();
    }
}

function stopTTS() {
    if (audioSource) {
        audioSource.stop();
        audioSource = null;
    }
    isPlaying = false;
    ttsSpinner.style.display = 'none';
    ttsStop.style.display = 'none';
    ttsIcon.style.display = 'block';
}

ttsButton.addEventListener('click', handleTTS);
copyButton.addEventListener('click', handleCopy);

function handleCopy() {
    const answerElement = document.getElementById('answer');
    const clonedAnswerElement = answerElement.cloneNode(true);

    const supElements = clonedAnswerElement.querySelectorAll('sup');
    supElements.forEach(sup => sup.remove());

    const answerText = clonedAnswerElement.innerText;

    navigator.clipboard.writeText(answerText).then(() => {
        copyIcon.style.display = 'none';
        checkmarkIcon.style.display = 'block';

        setTimeout(() => {
            checkmarkIcon.style.display = 'none';
            copyIcon.style.display = 'block';
        }, 2000);
    }).catch(err => {
        console.error('Could not copy text: ', err);
    });
}

function openLightbox(imgSrc, index, imageList) {
    currentImageList = imageList;
    currentImageIndex = index;
    loadImageInLightbox(imgSrc);
    lightbox.classList.add('active');
    document.body.style.overflow = 'hidden';
    updateLightboxButtons();
}

function loadImageInLightbox(imgSrc) {
    lightboxImg.src = '';
    lightboxImg.style.display = 'none';
    spinner.style.display = 'block';

    const img = new Image();
    img.src = imgSrc;
    img.onload = function () {
        lightboxImg.src = imgSrc;
        spinner.style.display = 'none';
        lightboxImg.style.display = 'block';
    };

    img.onerror = function () {
        spinner.style.display = 'none';
        lightboxImg.alt = 'Failed to load image';
    };
}

function updateLightboxButtons() {
    if (currentImageIndex <= 0) {
        lightboxPrev.style.display = 'none';
    } else {
        lightboxPrev.style.display = 'flex';
    }

    if (currentImageIndex >= currentImageList.length - 1) {
        lightboxNext.style.display = 'none';
    } else {
        lightboxNext.style.display = 'flex';
    }
}

function showPreviousImage() {
    if (currentImageIndex > 0) {
        currentImageIndex--;
        const imgSrc = currentImageList[currentImageIndex];
        loadImageInLightbox(imgSrc);
        updateLightboxButtons();
    }
}

function showNextImage() {
    if (currentImageIndex < currentImageList.length - 1) {
        currentImageIndex++;
        const imgSrc = currentImageList[currentImageIndex];
        loadImageInLightbox(imgSrc);
        updateLightboxButtons();
    }
}

lightboxPrev.addEventListener('click', showPreviousImage);
lightboxNext.addEventListener('click', showNextImage);

function closeLightbox() {
    lightbox.classList.remove('active');
    document.body.style.overflow = '';
    lightboxImg.src = '';
    lightboxImg.style.display = 'none';
    spinner.style.display = 'none';
}

lightboxClose.addEventListener('click', closeLightbox);
lightbox.addEventListener('click', (e) => {
    if (e.target === lightbox) {
        closeLightbox();
    }
});

function submitSearch(query) {
    query = btoa(query);
    console.log('Submitting search:', query);
    removeExpandButton();
    showSkeletonLoader();
    removeExistingWebResults();

    fetch(`${API_BASE_URL}/generalWebResults?q=${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(data => {
            console.log('Received general web results:', data);
            if (data.status === 'completed') {
                displayGeneralWebResults(data.webResults);
            }
        })
        .catch(error => {
            console.error('Error fetching general web results:', error);
        });

    fetch(`${API_BASE_URL}/quick?q=${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(data => {
            console.log('Received quick results:', data);
            displayQuickResults(data);
        })
        .catch(error => {
            console.error('Error fetching quick results:', error);
        });

    fetch(`${API_BASE_URL}/images?q=${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(data => {
            console.log('Received images:', data);
            storedImages = data.images || [];
            displayImages(storedImages);
        })
        .catch(error => {
            console.error('Error fetching images:', error);
        });

    fetch(`${API_BASE_URL}/aiResult`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query })
    })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'completed' && !data.error) {
                console.log('Received AI answer:', data);
                hideSkeletonLoader(() => {
                    if (answerContent.scrollHeight > MAX_ANSWER_HEIGHT) {
                        answerContent.classList.add('collapsed');
                        answerContent.style.maxHeight = MAX_ANSWER_HEIGHT + 'px';

                        const expandButton = document.createElement('button');
                        expandButton.className = 'expand-button';
                        expandButton.textContent = 'Show more';

                        answerContent.insertAdjacentElement('afterend', expandButton);

                        expandButton.addEventListener('click', function () {
                            if (answerContent.classList.contains('collapsed')) {
                                answerContent.classList.remove('collapsed');
                                answerContent.style.maxHeight = answerContent.scrollHeight + 10 + 'px';
                                expandButton.textContent = 'Show less';
                                answerContent.addEventListener('transitionend', function handler() {
                                    answerContent.style.maxHeight = 'none';
                                    answerContent.removeEventListener('transitionend', handler);
                                });
                            } else {
                                answerContent.style.maxHeight = answerContent.scrollHeight + 'px';
                                answerContent.offsetHeight;
                                answerContent.classList.add('collapsed');
                                answerContent.style.maxHeight = MAX_ANSWER_HEIGHT + 'px';
                                expandButton.textContent = 'Show more';
                            }
                        });
                    }
                });

                answerDiv.innerHTML = '';
                answerRight.innerHTML = '';

                const processedAnswer = processCitations(data.answer, data.urls);
                const parsedHtml = marked.parse(processedAnswer);

                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = parsedHtml;

                const config = {
                    ADD_ATTR: ['target', 'rel']
                };
                const finalHtml = DOMPurify.sanitize(tempDiv.innerHTML, config);
                answerDiv.innerHTML = finalHtml;

                answerLeft.appendChild(toolbar);

                if (data.images && data.images.length > 0) {
                    const imagesToShow = data.images.slice(0, 4);
                    answerImageList = imagesToShow;

                    const imageGrid = document.createElement('div');
                    imageGrid.className = 'image-grid';

                    imagesToShow.forEach((imgUrl, index) => {
                        const gridItem = document.createElement('div');
                        gridItem.className = 'image-grid-item';

                        const skeletonOverlay = document.createElement('div');
                        skeletonOverlay.className = 'image-skeleton-overlay';
                        gridItem.appendChild(skeletonOverlay);

                        const img = document.createElement('img');
                        img.src = imgUrl + '&h=300&w=300';
                        img.dataset.fullSrc = imgUrl;
                        img.dataset.index = index;
                        img.alt = 'Related Image';
                        img.style.opacity = '0';

                        gridItem.appendChild(img);
                        imageGrid.appendChild(gridItem);
                    });

                    answerRight.appendChild(imageGrid);

                    const images = imageGrid.querySelectorAll('.image-grid-item img');

                    images.forEach(img => {
                        img.addEventListener('load', () => {
                            img.addEventListener('click', () => openLightbox(img.dataset.fullSrc, parseInt(img.dataset.index), answerImageList));
                            const skeletonOverlay = img.parentElement.querySelector('.image-skeleton-overlay');
                            if (skeletonOverlay) {
                                skeletonOverlay.remove();
                            }
                            img.style.opacity = '1';
                        });
                        img.addEventListener('error', () => {
                            img.alt = 'Failed to load image';
                        });
                    });
                }

                const sourcesList = createSourcesList(data.urls);
                answerRight.appendChild(sourcesList);

            } else if (data.status === 'error' || data.error) {
                hideSkeletonLoader();
                console.log(data);
                answerDiv.innerText = `Error: An error occurred while processing the search query`;
            }
        })
        .catch(error => {
            console.error('Error fetching AI result:', error);
            hideSkeletonLoader();
            answerDiv.innerText = `Error: ${error.message}`;
        });
}

function displayGeneralWebResults(webResults) {
    const webResultsContainer = document.createElement('div');
    webResultsContainer.className = 'web-results';

    webResults.forEach(result => {
        const resultItem = document.createElement('div');
        resultItem.className = 'web-result-item';

        const titleLink = document.createElement('a');
        titleLink.href = result.url;
        titleLink.target = '_blank';
        titleLink.rel = 'noopener noreferrer';
        titleLink.className = 'web-result-title';
        titleLink.textContent = result.title;

        const urlLink = document.createElement('a');
        urlLink.href = result.url;
        urlLink.target = '_blank';
        urlLink.rel = 'noopener noreferrer';
        urlLink.className = 'web-result-url';
        urlLink.textContent = result.url;

        const description = document.createElement('p');
        description.className = 'web-result-description';
        description.textContent = result.description;

        const faviconImg = document.createElement('img');
        faviconImg.className = 'web-result-favicon';
        faviconImg.src = result.favicon;
        faviconImg.alt = 'Favicon';

        const header = document.createElement('div');
        header.className = 'web-result-header';
        header.appendChild(faviconImg);
        header.appendChild(urlLink);

        resultItem.appendChild(titleLink);
        resultItem.appendChild(header);
        resultItem.appendChild(description);

        webResultsContainer.appendChild(resultItem);
    });

    const generalWebResults = document.querySelector('.general-web-results');
    generalWebResults.innerHTML = '';
    generalWebResults.appendChild(webResultsContainer);
}

function removeExistingWebResults() {
    const existingWebResults = document.querySelector('.web-results');
    if (existingWebResults) {
        existingWebResults.remove();
    }
}

function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabIndicator = document.querySelector('.tab-indicator');

    function updateTabIndicator(button) {
        tabIndicator.style.width = `${button.offsetWidth}px`;
        tabIndicator.style.left = `${button.offsetLeft}px`;
    }

    tabButtons.forEach(button => {
        if (button.classList.contains('active')) {
            updateTabIndicator(button);
        }

        button.addEventListener('click', () => {
            const tabName = button.dataset.tab;
            switchTab(tabName);

            tabButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            updateTabIndicator(button);
        });
    });
}

function switchTab(tabName) {
    if (currentTab === tabName) return;

    const currentPane = document.querySelector(`#${currentTab}-tab`);
    const newPane = document.querySelector(`#${tabName}-tab`);

    currentPane.classList.remove('active');
    newPane.classList.add('active');

    if (tabName === 'create') {
        createInput.value = searchInput.value.trim();
    }

    currentTab = tabName;
}

function displayImages(images) {
    const imagesGrid = document.querySelector('.images-grid');
    imagesGrid.innerHTML = '';

    const imagePromises = images.map((imageUrl, index) => {
        return new Promise((resolve) => {
            const img = new Image();
            img.src = imageUrl;
            img.onload = function() {
                const aspectRatio = img.width / img.height;
                resolve({
                    url: imageUrl,
                    aspectRatio: aspectRatio,
                    index: index
                });
            };
            img.onerror = function() {
                resolve(null);
            };
        });
    });

    Promise.all(imagePromises).then(imageDataArray => {
        const validImages = imageDataArray.filter(data => data !== null);
        layoutImages(validImages);
        imagesTabImageList = validImages.map(data => data.url);
    });    
}

function layoutImages(imagesData) {
    const imagesGrid = document.querySelector('.images-grid');
    imagesGrid.innerHTML = '';

    const containerWidth = imagesGrid.clientWidth - 30;
    const gap = 8;
    const rowHeight = 150;

    let rows = [];
    let currentRow = [];
    let currentRowWidth = 0;

    imagesData.forEach(imageData => {
        const scaledWidth = imageData.aspectRatio * rowHeight;
        currentRow.push(imageData);
        currentRowWidth += scaledWidth + gap;

        if (currentRowWidth - gap >= containerWidth) {
            rows.push(currentRow);
            currentRow = [];
            currentRowWidth = 0;
        }
    });

    if (currentRow.length > 0) {
        rows.push(currentRow);
    }

    rows.forEach(row => {
        const rowDiv = document.createElement('div');
        rowDiv.className = 'image-row';

        const totalAspectRatio = row.reduce((sum, img) => sum + img.aspectRatio, 0);
        const rowWidth = containerWidth - gap * (row.length - 1);
        const scale = rowWidth / (totalAspectRatio * rowHeight);

        row.forEach((imageData, index) => {
            const imgWidth = imageData.aspectRatio * rowHeight * scale;
            const imgHeight = rowHeight * scale;

            const imageItem = document.createElement('div');
            imageItem.className = 'image-item';
            imageItem.style.flex = `0 0 ${imgWidth}px`;
            imageItem.style.height = `${imgHeight}px`;
            imageItem.style.marginRight = index < row.length - 1 ? `${gap}px` : '0';

            const img = document.createElement('img');
            img.src = imageData.url + '&h=300&w=300';
            img.alt = 'Search result image';
            img.style.width = '100%';
            img.style.height = '100%';
            img.style.objectFit = 'cover';

            img.setAttribute('data-fullSrc', imageData.url);
            img.setAttribute('data-index', imageData.index);

            imageItem.appendChild(img);
            rowDiv.appendChild(imageItem);

            imageItem.addEventListener('click', () => {
                openLightbox(imageData.url, imageData.index, imagesTabImageList);
            });            
        });

        imagesGrid.appendChild(rowDiv);
    });
}

let resizeTimeout;
window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
        if (storedImages.length > 0) {
            displayImages(storedImages);
        }
    }, 200);
});

function initializeLazyLoading() {
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                observer.unobserve(img);
            }
        });
    });

    document.querySelectorAll('.image-item img[data-src]').forEach(img => {
        imageObserver.observe(img);
    });
}

function fetchSuggestions(query) {
    query = btoa(query);
    fetch(`${API_BASE_URL}/suggestions?q=${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(data => {
            displaySuggestions(data.suggestions);
        })
        .catch(error => {
            console.error('Error fetching suggestions:', error);
        });
}

function displaySuggestions(suggestions) {
    suggestionsContainer.innerHTML = '';
    suggestions.forEach(suggestion => {
        const suggestionItem = document.createElement('div');
        suggestionItem.className = 'suggestion-item';
        suggestionItem.textContent = suggestion;
        suggestionItem.addEventListener('click', () => {
            searchInput.value = suggestion;
            clearSuggestions();
            handleSearchSubmission(suggestion);
        });
        suggestionsContainer.appendChild(suggestionItem);
    });
    if (suggestions.length > 0) {
        suggestionsContainer.style.display = 'block';
    } else {
        suggestionsContainer.style.display = 'none';
    }
}

function clearSuggestions() {
    suggestionsContainer.innerHTML = '';
    suggestionsContainer.style.display = 'none';
}

function generateCreateImage(prompt) {
    prompt = btoa(prompt);
    createPlaceholder.textContent = 'Generating image...';
    createImage.style.display = 'none';

    fetch(`${API_BASE_URL}/create`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt })
    })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'completed' && data.imageUrl) {
                createImage.src = data.imageUrl;
                createImage.style.display = 'block';
                createPlaceholder.style.display = 'none';
            } else {
                createPlaceholder.textContent = 'Failed to generate image';
                createPlaceholder.style.display = 'block';
            }
        })
        .catch(error => {
            console.error('Error generating image:', error);
            createPlaceholder.textContent = 'Error generating image';
            createPlaceholder.style.display = 'block';
        });
}

function displayQuickResults(data) {
    const quickResults = document.querySelector('.quick-results');
    quickResults.innerHTML = '';

    const queryResult = data.queryresult;
    if (!queryResult || !queryResult.pods || !queryResult.pods.length) {
        return;
    }

    queryResult.pods.forEach(pod => {
        const podTitle = pod.title;
        const podDiv = document.createElement('div');
        podDiv.className = 'quick-pod';

        if (podTitle) {
            const titleElement = document.createElement('h3');
            titleElement.className = 'quick-pod-title';
            titleElement.textContent = podTitle;
            podDiv.appendChild(titleElement);
        }

        if (pod.subpods && pod.subpods.length) {
            pod.subpods.forEach(subpod => {
                if (subpod.title) {
                    const subpodTitleElement = document.createElement('h4');
                    subpodTitleElement.className = 'quick-subpod-title';
                    subpodTitleElement.textContent = subpod.title;
                    podDiv.appendChild(subpodTitleElement);
                }

                const img = subpod.img;
                if (img && img.src) {
                    const imgElement = document.createElement('img');
                    imgElement.src = img.src;
                    imgElement.alt = img.alt || '';
                    imgElement.title = img.title || '';
                    imgElement.className = 'quick-pod-image';
                    podDiv.appendChild(imgElement);
                }
            });
        }

        quickResults.appendChild(podDiv);
    });
}

```

public\style.css
```css
@font-face {
    font-family: "Poly Sans";
    src: url('fonts/PolySansNeutral.ttf') format('truetype');
}

@font-face {
    font-family: "Poly Sans Bulky";
    src: url('fonts/PolySansBulky.ttf') format('truetype');
}

@font-face {
    font-family: "Poly Sans Slim";
    src: url('fonts/PolySansSlim.ttf') format('truetype');
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Poly Sans", Arial, sans-serif;
    background-color: #ffffff;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    min-height: 100vh;
    transition: padding-top 0.5s ease;
}

.navbar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 135px;
    background-color: white;
    z-index: 10;
    opacity: 0;
    transition: opacity 0.5s ease;
    background: linear-gradient(to bottom,
            rgba(255, 255, 255, 1) 0%,
            rgba(255, 255, 255, 1) 80%,
            rgba(255, 255, 255, 0) 100%);
}

#logo {
    font-family: "Poly Sans Bulky", Arial, sans-serif;
    font-size: 4rem;
    color: #333;
}

#logo a {
    text-decoration: none;
    color: inherit;
    pointer-events: none;
}

#search-form {
    width: 100%;
    max-width: 800px;
    padding: 2rem;
    text-align: center;
    transition: all 0.5s ease;
}

#logo,
#search-form {
    position: relative;
    z-index: 100;
}

.search-container {
    display: flex;
    position: relative;
    align-items: center;
    background-color: #efefef;
    border-radius: 50px;
    padding: 0.5rem;
    margin: 0 auto;
    transition: all 0.5s ease;
}

::placeholder {
    color: #8b8b8b;
}

.search-input-wrapper {
    position: relative;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

#search-input {
    width: 100%;
    border: none;
    outline: none;
    font-family: "Poly Sans", Arial, sans-serif;
    font-size: 1.2rem;
    padding: 0.5rem;
    background: transparent;
}

#suggestions-container {
    position: absolute;
    top: calc(100% + 9px);
    left: 50%;
    transform: translateX(-50%);
    width: 100%;
    max-width: 800px;
    background-color: #fff;
    border: 1px solid #ccc;
    border-top: none;
    z-index: 10;
    display: none;
    border-radius: 0 0 30px 30px;
}

.suggestion-item {
    padding: 10px 15px;
    cursor: pointer;
    font-size: 1rem;
    color: #333;
}

.suggestion-item:last-child {
    border-bottom-left-radius: 30px;
    border-bottom-right-radius: 30px;
}

.suggestion-item:hover {
    background-color: #f0f0f0;
}

#search-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    color: #333;
}

#search-icon svg {
    width: 24px;
    height: 24px;
}

#search-button {
    background-color: #000000;
    color: #ffffff;
    border: none;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 10px;
    width: 32px;
    height: 32px;
    cursor: pointer;
    transition: opacity 0.3s ease;
}

#search-button svg {
    width: 32px;
    height: 32px;
    rotate: 90deg;
}

#search-button:hover {
    opacity: 0.8;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.tab-navigation {
    display: none;
    position: fixed;
    justify-content: center;
    width: 100%;
    max-width: 800px;
    top: 70px;
    z-index: 11;
}

.tab-button {
    background: none;
    border: none;
    padding: 10px 20px;
    font-family: "Poly Sans", Arial, sans-serif;
    font-size: 1rem;
    color: #666;
    cursor: pointer;
    position: relative;
    transition: color 0.3s ease;
}

.tab-button.active {
    color: #000;
}

.tab-indicator {
    position: absolute;
    bottom: 0;
    height: 2px;
    background-color: #000;
    transition: all 0.3s ease;
}

.tab-content {
    position: relative;
    width: 100%;
    overflow: hidden;
}

.tab-pane {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow-y: auto;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.5s ease, visibility 0.5s ease;
    background-color: #ffffff;
}

.tab-pane.active {
    opacity: 1;
    visibility: visible;
    position: relative;
    transition: opacity 0.5s ease 0s, visibility 0.5s ease 0s;
    z-index: 2;
}

.main-content {
    max-width: 1300px;
    margin: 0 auto;
    padding: 0 1rem;
}

.answerContent {
    display: flex;
    flex-direction: row;
    gap: 20px;
    max-width: 1300px;
    margin: 0 auto;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.2s ease, transform 0.2s ease, max-height 0.5s ease;
    overflow: hidden;
}

.answer-left {
    flex: 1;
    max-width: 65%;
}

.answer-right {
    flex: 0 0 35%;
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin: 1.5rem 0;
}

.collapsed {
    position: relative;
}

.collapsed::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 50px;
    background: linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(255, 255, 255, 1));
}

.expand-button {
    display: block;
    position: relative;
    margin: -20px auto 0px auto;
    background-color: #000;
    color: #fff;
    border: none;
    padding: 10px 20px;
    font-size: 1rem;
    border-radius: 25px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    z-index: 1;
}

.expand-button:hover {
    background-color: #333;
}

#answer {
    text-align: left;
    font-size: 1.1rem;
    line-height: 1.6;
}

#answer h1,
#answer h2,
#answer h3 {
    font-family: "Poly Sans Bulky", Arial, sans-serif;
    margin-top: 1.5rem;
    margin-bottom: 1.0rem;
}

#answer p {
    margin-bottom: 1rem;
}

#answer ul,
#answer ol {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
}

#answer code {
    background-color: #f5f5f5;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: "Poly Sans Slim", monospace;
}

#answer pre {
    background-color: #f5f5f5;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    overflow-x: auto;
}

#answer blockquote {
    border-left: 4px solid #ccc;
    padding-left: 1rem;
    color: #666;
    margin-bottom: 1rem;
}

#answer a {
    color: #007bff;
    text-decoration: none;
}

#answer a:hover {
    text-decoration: underline;
}

#answer sup {
    font-size: 0.75em;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
    top: -0.5em;
}

#answer sup a {
    color: #007bff;
    text-decoration: none;
    margin: 0 2px;
}

#answer sup a:hover {
    text-decoration: underline;
}

.highlight {
    background-color: #c4c4c4;
    padding: 0.2em;
    border-radius: 4px;
}

.image-grid,
.skeleton-image-grid {
    display: grid;
    max-width: 100%;
    grid-template-columns: repeat(4, 1fr);
    gap: 4px;
}

.image-grid-item,
.skeleton-image {
    width: 100%;
    padding-top: 100%;
    position: relative;
    overflow: hidden;
    border-radius: 0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.image-grid-item:nth-child(1),
.skeleton-image:nth-child(1) {
    border-top-left-radius: 8px;
    border-bottom-left-radius: 8px;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.image-grid-item:nth-child(2),
.image-grid-item:nth-child(3),
.skeleton-image:nth-child(2),
.skeleton-image:nth-child(3) {
    border-radius: 0;
}

.image-grid-item:nth-child(4),
.skeleton-image:nth-child(4) {
    border-top-right-radius: 8px;
    border-bottom-right-radius: 8px;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

.image-skeleton-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
}

.image-grid-item img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease, transform 0.3s ease;
    cursor: pointer;
    z-index: 1;
    opacity: 0;
}

.image-grid-item img:hover {
    transform: scale(1.05);
}

.skeleton-element {
    background: #eee;
    background: linear-gradient(270deg, #f1f1f1, #e1e1e1, #f1f1f1);
    background-size: 200% 100%;
    border-radius: 8px;
    animation: gradientMoves 800ms linear infinite;
}

@keyframes gradientMoves {
    0% {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    100% {
        background-position: 200% 50%;
    }
}

.skeleton-loader {
    display: flex;
    flex-direction: row;
    gap: 20px;
    max-width: 1300px;
    margin: 0 auto;
    padding: 1rem;
}

.skeleton-left {
    flex: 1;
    max-width: 65%;
}

.skeleton-right {
    flex: 0 0 35%;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.skeleton-title {
    width: 80%;
    height: 32px;
    margin-top: 1.5rem;
    margin-bottom: 1.0rem;
}

.skeleton-text {
    width: 100%;
    height: 20px;
    margin-bottom: 8px;
}

.skeleton-text.short {
    width: 60%;
}

.skeleton-image {
    position: relative;
    width: 100%;
    padding-top: 100%;
    overflow: hidden;
    border-radius: 8px;
}

.skeleton-image::after {
    content: '';
    display: block;
    background: inherit;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.sources-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin: 1rem 0;
}

.source-item {
    display: flex;
    flex-direction: column;
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 0.75rem;
    transition: background-color 0.3s ease;
}

.source-item:hover {
    background-color: #f1f1f1;
}

.source-header {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
}

.favicon {
    width: 16px;
    height: 16px;
    margin-right: 0.5rem;
}

.source-url {
    font-size: 0.8rem;
    color: #666;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.source-title {
    font-size: 0.9rem;
    color: #333;
    text-decoration: none;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.3;
}

.source-title:hover {
    text-decoration: underline;
}

.toolbar {
    align-items: center;
    display: flex;
}

.toolbar-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background: none;
    border: none;
    cursor: pointer;
    width: 32px;
    height: 32px;
    transition: background-color 0.3s ease;
    padding: 0;
    border-radius: 7px;
}

.toolbar-button:hover {
    background-color: #f6f6f6;
}

@keyframes spin-icon {
    100% {
        transform: rotate(360deg);
    }
}

.tts-spinner {
    animation: spin-icon 1s linear infinite;
}

.tts-button {
    display: none;
}

.icon-md-heavy {
    width: 24px;
    height: 24px;
}

.content-seperator {
    display: none;
}

.answerContainer {
    width: 100%;
    margin-bottom: 2rem;
}

.results-container {
    display: flex;
    margin-top: 2rem;
    justify-content: space-between;
}

.general-web-results {
    flex: 0 0 65%;
    width: 60%;
    margin-right: 1rem;
}

.quick-results {
    flex: 0 0 35%;
    width: 40%;
}

.quickResultsContainer {
    width: 300px;
    margin-left: 20px;
    flex-shrink: 0;
}

.quick-pod {
    margin-bottom: 20px;
}

.quick-pod-title {
    font-size: 1rem;
    font-weight: bold;
    margin-bottom: 10px;
}

.quick-subpod-title {
    font-size: 0.9rem;
    font-weight: normal;
    margin-bottom: 5px;
    color: #555;
}

.quick-pod-image {
    max-width: 100%;
    height: auto;
    display: block;
    margin-bottom: 10px;
}

@media (max-width: 768px) {
    .main-content {
        flex-direction: column;
    }

    .quickResultsContainer {
        width: 100%;
        margin-left: 0;
    }
}

@media (max-width: 768px) {
    .results-container {
        flex-direction: column;
    }

    .general-web-results,
    .quick-results {
        flex: none;
        margin-right: 0;
    }
}

.lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
}

.lightbox.active {
    opacity: 1;
    visibility: visible;
}

.lightbox-content {
    max-width: 84%;
    max-height: 90%;
    position: relative;
}

.lightbox-content img {
    max-width: 100%;
    max-height: 90vh;
    object-fit: contain;
    border-radius: 4px;
}

.lightbox-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
    z-index: 1001;
}

.lightbox-close:hover {
    background-color: none;
}

.lightbox-prev,
.lightbox-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.5);
    border: none;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
    z-index: 1001;
}

.lightbox-prev:hover,
.lightbox-next:hover {
    background: rgba(0, 0, 0, 0.8);
}

.lightbox-prev {
    left: 20px;
}

.lightbox-next {
    right: 20px;
}

.lightbox-prev:disabled,
.lightbox-next:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.spinner {
    display: none;
    border: 8px solid rgba(255, 255, 255, 0.3);
    border-top: 8px solid white;
    border-radius: 50%;
    width: 80px;
    height: 80px;
    animation: spin 1s linear infinite;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@keyframes spin {
    0% {
        transform: translate(-50%, -50%) rotate(0deg);
    }

    100% {
        transform: translate(-50%, -50%) rotate(360deg);
    }
}

.web-result-item {
    margin-bottom: 1.5rem;
}

.web-result-title {
    font-size: 1.2rem;
    color: #1a0dab;
    text-decoration: none;
}

.web-result-title:hover {
    text-decoration: underline;
}

.web-result-header {
    display: flex;
    align-items: center;
    margin: 0.5rem 0;
}

.web-result-favicon {
    width: 16px;
    height: 16px;
    margin-right: 0.5rem;
}

.web-result-url {
    font-size: 0.9rem;
    color: #006621;
    text-decoration: none;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.web-result-description {
    font-size: 0.9rem;
    color: #4d5156;
    line-height: 1.58;
}

.images-grid {
    display: flex;
    flex-direction: column;
    padding: 16px;
}

.image-row {
    display: flex;
    margin-bottom: 8px;
}

.image-item {
    overflow: hidden;
    border-radius: 4px;
    background-color: #f5f5f5;
    cursor: pointer;
}

.image-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.image-item:hover img {
    transform: scale(1.05);
}

.create-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem;
}

#create-form {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
}

#create-input {
    width: 300px;
    padding: 0.5rem;
    font-size: 1rem;
    margin-right: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
}

#create-button {
    padding: 0.5rem 1rem;
    font-size: 1rem;
    cursor: pointer;
    background-color: #000;
    color: #fff;
    border: none;
    border-radius: 4px;
}

.create-result {
    display: flex;
    flex-direction: column;
    align-items: center;
}

#create-image {
    max-width: 100%;
    max-height: 500px;
    border: 1px solid #ccc;
    border-radius: 8px;
    margin-top: 1rem;
}

#create-placeholder {
    font-size: 1rem;
    color: #666;
    margin-top: 1rem;
}

body.search-active {
    padding-top: 75px;
    justify-content: flex-start;
}

body.search-active .navbar {
    opacity: 1;
}

body.search-active #logo {
    font-size: 2rem;
    position: fixed;
    top: 15px;
    left: 20px;
    margin: 0;
}

body.search-active #logo a {
    pointer-events: auto;
}

body.search-active #logo a:hover {
    text-decoration: underline;
    text-decoration-color: black;
}

body.search-active #search-form {
    position: fixed;
    top: 0;
    width: 100%;
    padding: 10px 0;
}

body.search-active .search-container {
    max-width: 600px;
    width: 100%;
    margin: 0 auto;
}

body.search-active .content-seperator {
    display: block;
}

body.search-active .tab-navigation {
    display: flex;
}

body.search-active .tab-pane {
    padding: 3rem 1rem;
}

body.search-active .tab-content {
    height: calc(100vh - 80px);
}

body.search-active .answerContainer {
    min-height: 200px;
}

@media (max-width: 768px) {
    .answerContent {
        flex-direction: column;
    }

    .answer-left,
    .answer-right {
        max-width: 100%;
    }

    .sources-grid {
        flex-direction: column;
    }
}

@media (max-width: 600px) {
    #logo {
        font-size: 3rem;
    }

    .tts-button {
        margin-top: 15px;
    }

    .search-container {
        width: 100%;
    }

    body.search-active .search-container {
        width: 90%;
    }
}

@media (max-width: 480px) {
    .sources-grid {
        flex-direction: column;
    }
}
```

server.js
```javascript
const express = require('express');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 8000;

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`Server is running on port ${PORT}`);
});

```

This all works well, but I need to improve the loading of the `All` tab: both the `web-results` and the `quick-results` should have skeleton loaders, just like the `answerContent`.
For the web resutls, it should show 7 skeleton items, and each should look exactly like a `web-result-item`: a title, then a square icon and a url, followed by a couple lines of text.
For the quick answer, it should show 4 skeleton "pods": each should have a title, followed by a larger rectangle to look like like an image.

I want you to fully develop and implement this.