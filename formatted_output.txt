I am working on web app that will act like a simply search engine, where users can enter a search term or question, and get an AI generated answer in seconds. Here is the full project:

public\index.html
```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SearchT</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <div class="inputContainer">
        <header>
            <h1 id="logo">SearchT</h1>
        </header>
        <main>
            <form id="search-form">
                <div class="search-container">
                    <input type="text" id="search-input" placeholder="What are you looking for?" required>
                    <button type="submit" id="search-button">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="11" cy="11" r="8"></circle>
                            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                        </svg>
                    </button>
                </div>
            </form>
        </main>
    </div>
    <div class="answerContainer">
        <div id="loading" style="display: none;">Loading...</div>
        <div id="answer" style="display: none;"></div>
    </div>
    <script src="script.js"></script>
</body>

</html>
```

public\script.js
```javascript
document.addEventListener('DOMContentLoaded', function() {
    const searchForm = document.getElementById('search-form');
    const searchInput = document.getElementById('search-input');
    const loadingDiv = document.getElementById('loading');
    const answerDiv = document.getElementById('answer');

    searchForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const query = searchInput.value.trim();
        if (query) {
            activateSearchLayout();
            submitSearch(query);
        }
    });

    function activateSearchLayout() {
        document.body.classList.add('search-active');
    }

    async function submitSearch(query) {
        loadingDiv.style.display = 'block';
        answerDiv.style.display = 'none';

        try {
            const response = await fetch('/api/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ query }),
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();
            pollForResult(data.jobId);
        } catch (error) {
            loadingDiv.style.display = 'none';
            answerDiv.style.display = 'block';
            answerDiv.innerText = `Error: ${error.message}`;
        }
    }

    async function pollForResult(jobId) {
        try {
            const response = await fetch(`/api/result/${jobId}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();

            if (data.status === 'completed') {
                loadingDiv.style.display = 'none';
                answerDiv.style.display = 'block';
                answerDiv.innerText = data.answer;
            } else if (data.status === 'error') {
                loadingDiv.style.display = 'none';
                answerDiv.style.display = 'block';
                answerDiv.innerText = `Error: ${data.error}`;
            } else {
                setTimeout(() => pollForResult(jobId), 100);
            }
        } catch (error) {
            loadingDiv.style.display = 'none';
            answerDiv.style.display = 'block';
            answerDiv.innerText = `Error: ${error.message}`;
        }
    }
});
```

public\style.css
```css
@font-face {
    font-family: "Poly Sans";
    src: url('fonts/PolySansNeutral.ttf') format('truetype');
}

@font-face {
    font-family: "Poly Sans Bulky";
    src: url('fonts/PolySansBulky.ttf') format('truetype');
}

@font-face {
    font-family: "Poly Sans Slim";
    src: url('fonts/PolySansSlim.ttf') format('truetype');
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Poly Sans", Arial, sans-serif;
    background-color: #f5f5f5;
    display: flex;
    align-items: center;
    flex-direction: column;
    min-height: 100vh;
    transition: padding-top 0.5s ease;
}

.inputContainer {
    position: absolute;
    max-width: 800px;
    width: 50vw;
    margin: 0 auto;
    padding: 2rem;
    text-align: center;
    transition: transform 0.5s ease;
}

header {
    margin-bottom: 2rem;
}

#logo {
    font-family: "Poly Sans Bulky", Arial, sans-serif;
    font-size: 4rem;
    color: #333;
    margin-bottom: 1rem;
    transition: all 0.5s ease;
}

.search-container {
    display: flex;
    background-color: #fff;
    border-radius: 50px;
    padding: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

#search-input {
    flex-grow: 1;
    border: none;
    outline: none;
    font-family: "Poly Sans", Arial, sans-serif;
    font-size: 1.2rem;
    padding: 0.5rem 1rem;
    background: transparent;
}

#search-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

#search-button svg {
    width: 24px;
    height: 24px;
    color: #333;
    transition: color 0.3s ease;
}

#search-button:hover svg {
    color: #007bff;
}

#loading {
    position: absolute;
    margin-top: 2rem;
    font-size: 1.5rem;
    color: #333;
}

#answer {
    margin-top: 2rem;
    text-align: left;
    padding: 1rem;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.answerContainer{
    height: 100%;
    padding-top: 100px;
    margin: 0 8rem;
    display: flex;
    flex-direction: column;
}

.search-active body {
    padding-top: 80px;
}

.search-active .inputContainer {
    width: 100%;
    max-width: 100%;
}

.search-active #logo {
    font-size: 2rem;
    position: absolute;
    left: 2rem;
}

.search-active .search-container {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    width: 90%;
    max-width: 600px;
    z-index: 100;
}

@media (max-width: 600px) {
    #logo {
        font-size: 3rem;
    }

    .search-container {
        width: 100%;
    }
}
```

server.js
```javascript
const express = require('express');
const path = require('path');
const axios = require('axios');
const cheerio = require('cheerio');
require('dotenv').config();
const GoogleGenerativeAI = require("@google/generative-ai").GoogleGenerativeAI;

const app = express();
const PORT = process.env.PORT || 8000;

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

const jobQueue = new Map();

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.post('/api/search', (req, res) => {
    const query = req.body.query;
    if (!query) {
        res.status(400).json({ error: 'No query provided' });
        return;
    }

    const jobId = Date.now().toString();
    jobQueue.set(jobId, { status: 'pending', query });

    processJob(jobId);

    res.json({ jobId });
});

app.get('/api/result/:jobId', (req, res) => {
    const jobId = req.params.jobId;
    const job = jobQueue.get(jobId);

    if (!job) {
        res.status(404).json({ error: 'Job not found' });
    } else {
        res.json(job);
    }
});

async function processJob(jobId) {
    const job = jobQueue.get(jobId);
    
    try {
        const searchResults = await searchInternet(job.query);
        const prompt = `You are a helpful search companion and assistant. Your purpose is to generate relevant and concise summaries of the user's query.
The user's query is:

\`\`\`
${job.query}
\`\`\`

You have the following online results to assist you in your answer.
If you use any of the content from these results, please provide a citation to the original source using its index number. You can use the following format to cite a result: {{{number}}}. For example, to cite the first result, use {{{0}}}.

Web results:

\`\`\`
${JSON.stringify(searchResults, null, 2)}
\`\`\`
`;

        const aiResult = await aiResponse(prompt);
        jobQueue.set(jobId, { status: 'completed', answer: aiResult });
    } catch (error) {
        console.error(error);
        jobQueue.set(jobId, { status: 'error', error: 'Internal Server Error' });
    }
}

async function searchInternet(query) {
    try {
        console.log(`Debug: Searching DuckDuckGo for '${query}'`);

        const headers = {
            'User-Agent':
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 ' +
                '(KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        };

        const url = `https://html.duckduckgo.com/html/?q=${encodeURIComponent(query)}`;
        const response = await axios.get(url, { headers });

        if (response.status !== 200) {
            console.log(`Error: HTTP error ${response.status}`);
            return { error: `HTTP error ${response.status}` };
        }

        const $ = cheerio.load(response.data);
        let results = [];
        $('a.result__a').each((i, elem) => {
            const href = $(elem).attr('href');
            if (href) {
                results.push(href);
            }
        });

        results = results
            .filter(url => !url.startsWith("https://duckduckgo.com"))
            .slice(0, 7);
        console.log(`Found ${results.length} results:`, results);

        let outputResults = [];
        let totalContentLength = 0;
        const maxCharacters = 125000;
        let index = 0;

        for (let resultUrl of results) {
            if (totalContentLength >= maxCharacters) {
                break;
            }

            console.log(`Fetching result page: ${resultUrl}`);
            try {
                const pageResponse = await axios.get(resultUrl, {
                    headers,
                    maxRedirects: 5,
                    timeout: 1000,
                    validateStatus: function (status) {
                        return status >= 200 && status < 400;
                    },
                });

                const $page = cheerio.load(pageResponse.data);

                $page('script, style').remove();

                const pageText = $page('body').text()
                    .replace(/\s+/g, ' ')
                    .trim();

                let contentToAdd;
                if (totalContentLength + pageText.length > maxCharacters) {
                    contentToAdd = pageText.slice(0, maxCharacters - totalContentLength);
                } else {
                    contentToAdd = pageText;
                }

                totalContentLength += contentToAdd.length;
                outputResults.push({
                    index: index,
                    resultUrl: resultUrl,
                    content: contentToAdd,
                });
                index++;

                if (totalContentLength >= maxCharacters) {
                    break;
                }
            } catch (error) {
                console.log(`Error: Failed to fetch page ${resultUrl}, ${error.message}`);
                continue;
            }
        }

        return outputResults;
    } catch (error) {
        console.error(`Error: ${error.message}`);
        return { error: error.message };
    }
}

async function aiResponse(prompt) {
    try {
        const genAI = new GoogleGenerativeAI(process.env.AI_STUDIO_KEY);
        const model = genAI.getGenerativeModel({
            model: "gemini-1.5-flash",
            generationConfig: {
                temperature: 0
            },
            systemInstruction: ""
        });

        const result = await model.generateContent(prompt);
        return result.response.text();
    } catch (error) {
        console.log(error);
        return { error: error };
    }
}

app.listen(PORT, '0.0.0.0', () => {
    console.log(`Server is running`);
});

```

This all works well, but I want to improve the UI and UX of the page. When first loaded, have the input container be centered in the middle of the page. But when a search has started, I want the logo to go to the top left corner, and the search bar to go to the top too, on the same level. This should all be smoothly animated. Also, I want to have the answer container be improved. I want you to fully develop and implement all this for me.